model SteamProfile {
  // Data fields
  id        String   @id @default(cuid())
  steamId64 String   @unique // (unsigned 64-bit) stored as string due to JS/TS safe-integer limits
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // FKs and relations
  userId         String?                   @unique
  user           User?                     @relation(fields: [userId], references: [id], onDelete: SetNull)
  ownedPlaylists SteamPlaylist[]           @relation("SteamPlaylistOwner")
  playlists      SteamPlaylist[]           @relation("SteamPlaylistToSteamProfile")
  gameRatings    SteamPlaylistGameRating[]

  @@map("steam_profile")
}

model SteamPlaylist {
  // Data fields
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // FKs and relations
  ownerId      String
  owner        SteamProfile        @relation("SteamPlaylistOwner", fields: [ownerId], references: [id])
  participants SteamProfile[]      @relation("SteamPlaylistToSteamProfile")
  games        SteamPlaylistGame[]

  @@index([ownerId])
  @@map("steam_playlist")
}

model SteamPlaylistGame {
  // Data fields
  id         String  @id @default(cuid())
  steamAppId String
  archived   Boolean @default(false)

  // FKs and relations
  playlistId String
  playlist   SteamPlaylist             @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  ratings    SteamPlaylistGameRating[]

  @@unique([playlistId, steamAppId])
  @@index([steamAppId])
  @@map("steam_playlist_game")
}

enum RatingValue {
  PENDING
  YES
  NO
  MAYBE
}

model SteamPlaylistGameRating {
  // Data fields
  id    String      @id @default(cuid())
  value RatingValue @default(PENDING)

  // FKs and relations
  gameId    String
  game      SteamPlaylistGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  profileId String
  profile   SteamProfile      @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([gameId, profileId])
  @@index([profileId])
  @@map("steam_playlist_game_rating")
}
